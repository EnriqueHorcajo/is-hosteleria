class Comanda
!!!156549.java!!!	Comanda()
		comanda = new HashMap[4];
		for (int i = 0; i < 4; i++)
			comanda[i] = new HashMap<Consumicion, Integer>();
!!!156677.java!!!	addObserver(inout obs : ComandaObserver) : void
		this.observers.add(obs);
!!!156805.java!!!	addConsumicion(inout consumicion : Consumicion, in index : int) : void
		if (comanda[index].containsKey(consumicion)) {
			comanda[index]
					.put(consumicion, comanda[index].get(consumicion) + 1);
		} else
			comanda[index].put(consumicion, 1);
		this.precio += consumicion.getPrecio();
		emitirCambio();
!!!156933.java!!!	deleteConsumicion(inout consumicion : Consumicion, in index : int) : void
		if (comanda[index].containsKey(consumicion)) {
			comanda[index]
					.put(consumicion, comanda[index].get(consumicion) - 1);
			if (comanda[index].get(consumicion) == 0)
				comanda[index].remove(consumicion);
			this.precio -= consumicion.getPrecio();
			emitirCambio();
		} else
			// Emitir un error
			;
!!!157061.java!!!	addPrimero(inout primero : Plato) : void
		addConsumicion(primero, 0);
!!!157189.java!!!	deletePrimero(inout primero : Plato) : void
		deleteConsumicion(primero, 0);
!!!157317.java!!!	setVecesPrimero(inout primero : Plato) : void

!!!157445.java!!!	addSegundo(inout segundo : Plato) : void
		addConsumicion(segundo, 1);
!!!157573.java!!!	deleteSegundo(inout segundo : Plato) : void
		deleteConsumicion(segundo, 1);
!!!157701.java!!!	setVecesSegundo(inout segundo : Plato) : void

!!!157829.java!!!	addPostre(inout postre : Postre) : void
		addConsumicion(postre, 2);
!!!157957.java!!!	deletePostre(inout postre : Postre) : void
		deleteConsumicion(postre, 2);
!!!158085.java!!!	setVecesPostre(inout postre : Postre) : void

!!!158213.java!!!	addBebida(inout bebida : Bebida) : void
		addConsumicion(bebida, 3);
!!!158341.java!!!	deleteBebida(inout bebida : Bebida) : void
		deleteConsumicion(bebida, 3);
!!!158469.java!!!	setVecesBebidas(inout drinking : Bebida) : void

!!!158597.java!!!	append(inout other : Comanda) : void
		for (int tipoPlato = 0; tipoPlato < 4; tipoPlato++) {
			Set<Consumicion> claveOther = other.comanda[tipoPlato].keySet();
			// Obtenemos un vector con los elementos de la otra Comanda del tipo
			// de plato i
			Consumicion[] consumicionesOther = claveOther
					.toArray(new Consumicion[claveOther.size()]);
			// Para cada elemento del vector, los a√±adimos tanta veces como
			// existira en la otra comanda
			for (int pos = 0; pos < consumicionesOther.length; pos++) {
				int veces = other.comanda[tipoPlato]
						.get(consumicionesOther[pos]);
				for (int num = 0; num < veces; num++)
					addConsumicion(consumicionesOther[pos], tipoPlato);
			}
		}
!!!158725.java!!!	toString() : String
		String pedido = "";
		for (int i = 0; i < 4; i++)
			for (Entry<Consumicion, Integer> entry : comanda[i].entrySet()) {
				pedido = pedido + entry.getKey().getNombre() + " "
						+ entry.getKey().getPrecio() + " Cantidad: "
						+ comanda[i].get(entry.getKey()) + LINE_SEPARATOR;
			}
		pedido += "TOTAL: " + this.precio;
		return pedido;
!!!158853.java!!!	lista() : Consumicion
		return null;

!!!158981.java!!!	emitirCambio() : void
		for (ComandaObserver obs : observers)
			obs.comandaHaCambiado(this.toString());
